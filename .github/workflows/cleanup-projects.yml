name: Cleanup Deleted Projects
on:
  push:
    branches: [master]
    paths:
      - 'projects/**'
  workflow_dispatch:
    inputs:
      force_cleanup:
        description: 'Force cleanup specific projects (comma-separated)'
        required: false
        default: ''

env:
  S3_BUCKET: teamsantos-static-websites

jobs:
  detect-deletions:
    runs-on: ubuntu-latest
    outputs:
      deleted-projects: ${{ steps.detect.outputs.deleted-projects }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for diff

      - id: detect
        run: |
          echo "🔍 Detecting deleted projects..."

          # Handle manual trigger with force cleanup
          if [ -n "${{ github.event.inputs.force_cleanup }}" ]; then
            echo "Force cleanup requested for: ${{ github.event.inputs.force_cleanup }}"
            DELETED_PROJECTS="${{ github.event.inputs.force_cleanup }}"
          elif [ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]; then
            # First push - no deletions
            echo "First push detected, no deletions to process"
            DELETED_PROJECTS=""
          else
            # Get deleted project directories
            DELETED_FILES=$(git diff --name-status "${{ github.event.before }}" "${{ github.sha }}" 2>/dev/null | grep '^D' | grep '^D.*projects/' || echo "")

            if [ -n "$DELETED_FILES" ]; then
              # Extract project names from deleted paths
              DELETED_PROJECTS=$(echo "$DELETED_FILES" | sed 's|D.*projects/||' | cut -d'/' -f1 | sort -u | tr '\n' ',' | sed 's/,$//')
            else
              DELETED_PROJECTS=""
            fi
          fi

          echo "Deleted projects: $DELETED_PROJECTS"
          echo "deleted-projects=$DELETED_PROJECTS" >> $GITHUB_OUTPUT

  cleanup:
    needs: detect-deletions
    if: needs.detect-deletions.outputs.deleted-projects != ''
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'master' && 'production' || 'staging' }}
    container:
      image: ghcr.io/${{ github.repository_owner }}/static-websites:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Parse deleted projects
        id: parse-projects
        shell: bash
        run: |
          # Convert comma-separated to space-separated for easier processing
          DELETED_PROJECTS="${{ needs.detect-deletions.outputs.deleted-projects }}"
          PROJECTS_SPACE=$(echo "$DELETED_PROJECTS" | tr ',' ' ')
          echo "projects-space=$PROJECTS_SPACE" >> $GITHUB_OUTPUT
          echo "🗑️ Projects to cleanup: $PROJECTS_SPACE"

      - name: Verify stacks exist before cleanup
        shell: bash
        run: |
          echo "🔍 Verifying CloudFormation stacks exist..."
          IFS=' ' read -ra PROJ_ARR <<< "${{ steps.parse-projects.outputs.projects-space }}"
          for project in "${PROJ_ARR[@]}"; do
            if [ -n "$project" ]; then
              STACK_NAME="Site-$project"
              echo "Checking stack: $STACK_NAME"

              STACK_EXISTS=$(aws cloudformation describe-stacks \
                --region us-east-1 \
                --stack-name "$STACK_NAME" \
                --query "Stacks[0].StackName" \
                --output text 2>/dev/null || echo "")

              if [ -n "$STACK_EXISTS" ]; then
                echo "✅ Stack $STACK_NAME exists and will be deleted"
              else
                echo "⚠️ Stack $STACK_NAME does not exist, skipping"
              fi
            fi
          done

      - name: Call cleanup API
        shell: bash
        run: |
          echo "🧹 Starting infrastructure cleanup..."

          # Use Node.js to handle the entire API call and response processing
          node -e "
            const https = require('https');
            const DELETED_PROJECTS = '${{ needs.detect-deletions.outputs.deleted-projects }}';
            const projects = DELETED_PROJECTS.split(',');

            const payload = JSON.stringify({ projects });

            console.log('Cleanup payload:', payload);

            const options = {
              hostname: 'api.e-info.click',
              path: '/cleanup-project',
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(payload)
              }
            };

            const req = https.request(options, (res) => {
              let data = '';

              res.on('data', (chunk) => {
                data += chunk;
              });

              res.on('end', () => {
                try {
                  const response = JSON.parse(data);
                  const statusCode = response.statusCode || res.statusCode;

                  console.log('API Response Status:', statusCode);

                  if (statusCode === 200) {
                    console.log('✅ Cleanup completed successfully');
                    const body = JSON.parse(response.body || '{}');
                    console.log('Results:', JSON.stringify(body, null, 2));
                  } else if (statusCode === 207) {
                    console.log('⚠️ Cleanup completed with some issues');
                    const body = JSON.parse(response.body || '{}');
                    console.log('Results:', JSON.stringify(body, null, 2));
                  } else {
                    console.log('❌ Cleanup failed');
                    console.log('Response:', JSON.stringify(response, null, 2));
                    process.exit(1);
                  }
                } catch (e) {
                  console.log('❌ Failed to parse API response');
                  console.log('Raw response:', data);
                  process.exit(1);
                }
              });
            });

            req.on('error', (e) => {
              console.error('❌ API call failed:', e);
              process.exit(1);
            });

            req.write(payload);
            req.end();
          "

      - name: Cleanup Summary
        shell: bash
        run: |
          echo "🧹 Project Cleanup Summary"
          echo "=========================="
          echo "Deleted projects: ${{ needs.detect-deletions.outputs.deleted-projects }}"
          echo "Total projects cleaned up: $(echo '${{ needs.detect-deletions.outputs.deleted-projects }}' | tr ',' '\n' | wc -l)"
          echo ""
          echo "🗑️ The following AWS resources were cleaned up:"
          IFS=' ' read -ra PROJ_ARR <<< "${{ steps.parse-projects.outputs.projects-space }}"
          for project in "${PROJ_ARR[@]}"; do
            if [ -n "$project" ]; then
              echo "  • CloudFormation Stack: Site-$project"
              echo "  • CloudFront Distribution for $project.e-info.click"
              echo "  • Route53 A Record for $project.e-info.click"
              echo "  • ACM Certificate for $project.e-info.click"
              echo "  • S3 files in s3://$S3_BUCKET/$project/"
              echo ""
            fi
          done
          echo "💰 This cleanup helps reduce AWS costs by removing unused resources."