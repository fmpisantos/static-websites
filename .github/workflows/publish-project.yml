name: Deploy Projects
on:
  push:
    branches: [master]
    paths:
        - 'projects/**'

env:
  S3_BUCKET: teamsantos-static-websites
  BUILD_DIR: dist

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.changed.outputs.projects }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history

      - id: changed
        run: |
          echo "Checking for changed projects..."
          echo "Before commit: ${{ github.event.before }}"
          echo "Current commit: ${{ github.sha }}"
          
          # Handle different scenarios for git diff
          if [ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]; then
            # First push or new branch - check all project folders
            echo "First push detected, checking all projects"
            CHANGED=$(find projects -maxdepth 1 -mindepth 1 -type d 2>/dev/null | cut -d/ -f2 | sort -u || echo "")
          else
            # Check if both commits exist
            if git cat-file -e "${{ github.event.before }}" 2>/dev/null && git cat-file -e "${{ github.sha }}" 2>/dev/null; then
              echo "Both commits found, doing normal diff"
              CHANGED=$(git diff --name-only "${{ github.event.before }}" "${{ github.sha }}" 2>/dev/null \
                | grep '^projects/' | cut -d/ -f2 | sort -u || echo "")
            else
              echo "One or both commits not found, trying fallback methods..."
              # Try HEAD~1 comparison
              if git cat-file -e "HEAD~1" 2>/dev/null; then
                echo "Using HEAD~1 comparison"
                CHANGED=$(git diff --name-only HEAD~1 HEAD 2>/dev/null \
                  | grep '^projects/' | cut -d/ -f2 | sort -u || echo "")
              else
                # Last resort - deploy all projects
                echo "Cannot determine changes, deploying all projects"
                CHANGED=$(find projects -maxdepth 1 -mindepth 1 -type d 2>/dev/null | cut -d/ -f2 | sort -u || echo "")
              fi
            fi
          fi
          
          # Convert to space-separated string for output
          CHANGED_STR=$(echo "$CHANGED" | tr '\n' ' ' | sed 's/[[:space:]]*$//')
          echo "Changed projects: $CHANGED_STR"
          echo "projects=$CHANGED_STR" >> $GITHUB_OUTPUT

  deploy:
    needs: detect-changes
    if: needs.detect-changes.outputs.projects != ''
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'master' && 'production' || 'staging' }}
    container:
      image: ghcr.io/${{ github.repository_owner }}/static-websites:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: npm ci

      - name: Deploy infrastructure
        run: |
          IFS=' ' read -ra PROJ_ARR <<< "${{ needs.detect-changes.outputs.projects }}"
          for project in "${PROJ_ARR[@]}"; do
            if [ -n "$project" ]; then
              echo "Deploying infra for $project"
              npx cdk deploy --require-approval never -c projects="$project"
            fi
          done

      - name: Wait for CDK outputs
        id: cdk-outputs
        run: |
          IFS=' ' read -ra PROJ_ARR <<< "${{ needs.detect-changes.outputs.projects }}"
          for project in "${PROJ_ARR[@]}"; do
            if [ -n "$project" ]; then
              BUCKET=$(aws cloudformation describe-stacks \
                --stack-name Site-$project \
                --query "Stacks[0].Outputs[?ExportName=='${project}-bucket'].OutputValue" \
                --output text)
              echo "${project}_BUCKET=$BUCKET" >> $GITHUB_ENV
            fi
          done

      - name: Build projects
        run: |
          IFS=' ' read -ra PROJ_ARR <<< "${{ needs.detect-changes.outputs.projects }}"
          for project in "${PROJ_ARR[@]}"; do
            if [ -n "$project" ]; then
              echo "Building project: $project"
              npm run build -- --root projects/$project --outDir dist/$project
            fi
          done

      - name: Sync built sites
        run: |
          IFS=' ' read -ra PROJ_ARR <<< "${{ needs.detect-changes.outputs.projects }}"
          for project in "${PROJ_ARR[@]}"; do
            if [ -n "$project" ]; then
              # Fix the variable reference
              BUCKET_VAR="${project}_BUCKET"
              BUCKET_VALUE="${!BUCKET_VAR}"
              echo "Syncing $project to bucket: $BUCKET_VALUE"
              aws s3 sync $BUILD_DIR/$project s3://$BUCKET_VALUE/$project --delete
            fi
          done
