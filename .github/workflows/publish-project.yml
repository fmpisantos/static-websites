name: Deploy Projects
on:
  push:
    branches: [master]
    paths:
        - 'projects/**'
  workflow_dispatch:
    inputs:
      force_deploy_all:
        description: 'Force deploy all projects'
        required: false
        default: 'false'

env:
  S3_BUCKET: teamsantos-static-websites
  BUILD_DIR: dist

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.changed.outputs.projects }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history

      - id: changed
        run: |
          echo "Checking for newly added projects..."
          echo "Current commit: ${{ github.sha }}"

          # Get newly added directories under projects/ in the current commit
          CHANGED=$(git diff --name-status "${{ github.event.before }}" "${{ github.sha }}" 2>/dev/null \
              | grep '^A' \
              | awk '{print $2}' \
              | grep '^projects/' \
              | cut -d/ -f2 \
              | sort -u || echo "")

          # Fallback if no changes detected
          if [ -z "$CHANGED" ]; then
              echo "No new projects detected"
          fi

          # Convert to space-separated string for output
          CHANGED_STR=$(echo "$CHANGED" | tr '\n' ' ' | sed 's/[[:space:]]*$//')
          echo "Newly added projects: $CHANGED_STR"
          echo "projects=$CHANGED_STR" >> $GITHUB_OUTPUT

  deploy:
    needs: detect-changes
    if: needs.detect-changes.outputs.projects != ''
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'master' && 'production' || 'staging' }}
    container:
      image: ghcr.io/${{ github.repository_owner }}/static-websites:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install infra dependencies
        working-directory: infra
        run: npm ci

      - name: Bootstrap CDK (if needed)
        working-directory: infra
        shell: bash
        run: |
          echo "Checking if CDK bootstrap is needed..."
          # Check if bootstrap stack exists
          if ! aws cloudformation describe-stacks --stack-name CDKToolkit --region us-east-1 2>/dev/null; then
            echo "CDK not bootstrapped, running bootstrap..."
            npx cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/us-east-1
          else
            echo "CDK already bootstrapped"
          fi

      - name: Deploy infrastructure
        working-directory: infra
        shell: bash
        run: |
          IFS=' ' read -ra PROJ_ARR <<< "${{ needs.detect-changes.outputs.projects }}"
          for project in "${PROJ_ARR[@]}"; do
            if [ -n "$project" ]; then
              echo "Deploying infra for $project"
              npx cdk deploy --require-approval never -c projects="$project"
            fi
          done

      - name: Wait for CDK outputs
        working-directory: infra
        id: cdk-outputs
        shell: bash
        run: |
          IFS=' ' read -ra PROJ_ARR <<< "${{ needs.detect-changes.outputs.projects }}"
          for project in "${PROJ_ARR[@]}"; do
            if [ -n "$project" ]; then
              BUCKET=$(aws cloudformation describe-stacks \
                --stack-name Site-$project \
                --query "Stacks[0].Outputs[?ExportName=='${project}-bucket'].OutputValue" \
                --output text)
              echo "${project}_BUCKET=$BUCKET" >> $GITHUB_ENV
            fi
          done

      - name: Build projects
        shell: bash
        run: |
          IFS=' ' read -ra PROJ_ARR <<< "${{ needs.detect-changes.outputs.projects }}"
          for project in "${PROJ_ARR[@]}"; do
            if [ -n "$project" ]; then
              echo "Building project: $project"
              npm run build -- --root projects/$project --outDir dist/$project
            fi
          done

      - name: Sync built sites
        shell: bash
        run: |
          IFS=' ' read -ra PROJ_ARR <<< "${{ needs.detect-changes.outputs.projects }}"
          for project in "${PROJ_ARR[@]}"; do
            if [ -n "$project" ]; then
              # Fix the variable reference
              BUCKET_VAR="${project}_BUCKET"
              BUCKET_VALUE="${!BUCKET_VAR}"
              echo "Syncing $project to bucket: $BUCKET_VALUE"
              aws s3 sync $BUILD_DIR/$project s3://$BUCKET_VALUE/$project --delete
            fi
          done
